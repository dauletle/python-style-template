# Python Programming Style Guidelines

## Introduction

This rule defines the standard Python programming style for this project, ensuring consistency, readability, and maintainability. We follow PEP 8 guidelines with some project-specific conventions, guided by the principles from "A Philosophy of Software Design" by John K. Ousterhout.

## Core Principles

### 1. Managing Complexity
- **Complexity is the enemy**: The most important goal in software design is to reduce complexity
- **Information hiding**: The key to managing complexity is to hide information so that developers don't need to know everything
- **Deep modules**: Create modules with simple interfaces that hide complex implementations
- **General-purpose design**: Prefer general-purpose solutions over special-purpose ones
- **Eliminate dependencies**: Reduce the number of dependencies between modules

### 2. Design Philosophy
- **Focus on what matters**: Separate what's important from what's not important
- **Design is iterative**: You must solve the problem once to understand it, then solve it again with better understanding
- **Comments are essential**: Use comments to document design decisions, not just code behavior
- **Interface design first**: Design interfaces before implementations
- **Strive for simplicity**: Simple solutions are usually better than complex ones

### 3. Module and Class Design
- **Deep modules**: Modules should have simple interfaces that hide complex implementations
- **Single responsibility**: Each module should have one clear purpose
- **Minimal interfaces**: Keep interfaces as small as possible while still being useful
- **Information hiding**: Hide implementation details behind meaningful abstractions
- **Consistency**: Use consistent patterns across similar modules

## Pattern Description

### 1. Naming Conventions

#### Basic Naming Rules
Use intention-revealing names that clearly communicate their purpose. Names should be:
- Descriptive and meaningful
- Follow Python naming conventions
- Avoid abbreviations unless widely accepted
- Use consistent patterns across the codebase

```python
# Good examples
def calculate_total_price(items):
    """Calculate the total price of items in the cart."""
    return sum(item.price for item in items)

class UserProfile:
    """Represents a user's profile information."""
    def __init__(self, username, email):
        self.username = username
        self.email = email

# Bad examples
def calc(items):  # Too abbreviated
    return sum(i.p for i in items)  # Unclear variable names

class UP:  # Too abbreviated
    def __init__(self, u, e):
        self.u = u  # Unclear attribute names
        self.e = e
```

#### Advanced Naming Rules

1. **Make Meaningful Distinctions**
   - Avoid using numbers or meaningless words to distinguish names
   - Use names that reflect the actual differences between entities
   - Avoid names with similar meanings (e.g., `fileNumber` and `fileIndex`)
   - Avoid names with different meanings but similar names (e.g., `clientRecs` and `clientReps`)

```python
# Good examples
def get_active_users():
    """Get users who are currently active."""
    return [user for user in users if user.is_active]

def get_inactive_users():
    """Get users who are not currently active."""
    return [user for user in users if not user.is_active]

# Bad examples
def get_users1():  # Meaningless distinction
    return [user for user in users if user.is_active]

def get_users2():  # Meaningless distinction
    return [user for user in users if not user.is_active]
```

2. **Use Pronounceable Names**
   - Names should be easy to say and understand in conversation
   - Avoid cryptic abbreviations
   - When shortening names, don't remove just one letter, be consistent, create pronounceable names

```python
# Good examples
class CustomerOrder:
    def __init__(self, order_id, customer_name):
        self.order_id = order_id
        self.customer_name = customer_name

# Bad examples
class CustOrd:  # Hard to pronounce
    def __init__(self, oid, cname):  # Cryptic abbreviations
        self.oid = oid
        self.cname = cname
```

3. **Class Names Should Be Nouns**
   - Classes represent things, not actions
   - Use noun or noun phrases for class names
   - Avoid god classes that do too much

```python
# Good examples
class UserManager:
    """Manages user-related operations."""
    pass

class OrderProcessor:
    """Processes customer orders."""
    pass

# Bad examples
class ManageUser:  # Verb phrase
    pass

class ProcessOrder:  # Verb phrase
    pass
```

4. **Method Names Should Be Verbs**
   - Methods represent actions
   - Use verb or verb phrases for method names
   - Name functions after the returned value
   - Name procedures with a strong verb and an object

```python
# Good examples
class User:
    def get_profile(self):
        """Retrieve the user's profile."""
        pass

    def update_preferences(self, preferences):
        """Update user preferences."""
        pass

# Bad examples
class User:
    def profile(self):  # Noun instead of verb
        pass

    def preferences(self, prefs):  # Noun instead of verb
        pass
```

### 2. Function Design Principles

1. **Function Length and Complexity**
   - **Focus on complexity, not length**: Function length is not inherently bad; focus on reducing complexity
   - **Deep functions are good**: Functions that hide complex implementations behind simple interfaces are valuable
   - **Avoid premature decomposition**: Don't break up functions just to make them shorter
   - **Measure by cognitive load**: A function is too complex when it requires too much information to understand

```python
# Good examples - Deep functions that hide complexity
def process_order(order):
    """Process a customer order with all necessary validations and calculations.
    
    This function handles the complete order processing workflow including
    validation, pricing, discount application, and persistence. The complexity
    of the business rules is hidden behind this simple interface.
    """
    if not order.is_valid():
        raise InvalidOrderError("Order validation failed")
    
    # Apply complex pricing rules
    base_total = sum(item.price * item.quantity for item in order.items)
    discount = calculate_customer_discount(order.customer, base_total)
    tax = calculate_tax(base_total - discount, order.shipping_address.state)
    shipping = calculate_shipping_cost(order.items, order.shipping_address)
    
    order.total = base_total - discount + tax + shipping
    order.status = 'processed'
    
    # Persist with transaction safety
    with database.transaction():
        save_order(order)
        update_inventory(order.items)
        send_confirmation_email(order)
    
    return order

# Bad examples - Premature decomposition
def process_order(order):
    """Process a customer order."""
    validate_order(order)
    calculate_order_total(order)
    save_order_to_database(order)
    send_email_confirmation(order)

def validate_order(order):
    """Validate order details."""
    if not order.items:
        raise ValueError("Order must contain items")

def calculate_order_total(order):
    """Calculate order total."""
    order.total = sum(item.price for item in order.items)

def save_order_to_database(order):
    """Save order to database."""
    db.save(order)

def send_email_confirmation(order):
    """Send email confirmation."""
    email.send(order.customer.email, "Order confirmed")
```

2. **Information Hiding and Abstraction**
   - **Hide implementation details**: Functions should hide complex implementations behind simple interfaces
   - **Reduce cognitive load**: Minimize the amount of information a developer needs to understand a function
   - **Document design decisions**: Use comments to explain why, not just what
   - **Prefer general-purpose over special-purpose**: Design functions that can be reused

```python
# Good examples - Information hiding
def calculate_shipping_cost(items, destination):
    """Calculate shipping cost for items to destination.
    
    This function encapsulates the complex shipping calculation logic including
    weight-based pricing, distance calculations, and special handling rules.
    The caller doesn't need to know about these implementation details.
    """
    # Complex shipping logic hidden from caller
    total_weight = sum(item.weight * item.quantity for item in items)
    distance = calculate_distance(warehouse_location, destination)
    
    # Apply shipping rules based on weight, distance, and item types
    base_cost = get_base_shipping_rate(distance)
    weight_surcharge = calculate_weight_surcharge(total_weight)
    special_handling = calculate_special_handling(items)
    
    return base_cost + weight_surcharge + special_handling

# Bad examples - Exposing implementation details
def calculate_shipping_cost(items, destination):
    """Calculate shipping cost."""
    # Exposes too much implementation detail to caller
    total_weight = sum(item.weight * item.quantity for item in items)
    distance = calculate_distance(warehouse_location, destination)
    base_cost = distance * 0.10  # Exposes pricing formula
    weight_surcharge = total_weight * 0.05  # Exposes weight formula
    return base_cost + weight_surcharge
```

3. **The Step Down Rule**
   - Code should read like a top-down narrative
   - Each function should be followed by those at the next level of abstraction
   - Organize code so that dependencies are obvious

```python
# Good examples
def process_monthly_report():
    """Generate and send monthly report."""
    data = collect_report_data()
    report = generate_report(data)
    send_report(report)

def collect_report_data():
    """Collect data needed for the report."""
    sales = get_sales_data()
    expenses = get_expense_data()
    return combine_data(sales, expenses)

# Bad examples
def process_monthly_report():
    """Generate and send monthly report."""
    sales = db.query("SELECT * FROM sales WHERE month = current_month")  # Mixing levels
    expenses = db.query("SELECT * FROM expenses WHERE month = current_month")
    report = f"Sales: {sum(s.amount for s in sales)}\nExpenses: {sum(e.amount for e in expenses)}"
    email.send("report@company.com", "Monthly Report", report)
```

4. **Command-Query Separation**
   - Functions should either do something (command) or return something (query), but not both
   - Commands change state, queries return information
   - Put parameters in input-modify-output order

```python
# Good examples
class User:
    def set_password(self, new_password):
        """Set a new password (command)."""
        self.password_hash = hash_password(new_password)
    
    def get_password_hash(self):
        """Get the password hash (query)."""
        return self.password_hash

# Bad examples
class User:
    def set_and_get_password(self, new_password):
        """Set a new password and return the hash (violates command-query separation)."""
        self.password_hash = hash_password(new_password)
        return self.password_hash
```

5. **Avoid Negative Conditionals**
   - Positive conditionals are easier to understand
   - Use positive names for boolean variables and functions
   - Write the nominal path through the code first, then the unusual cases

```python
# Good examples
def is_valid_user(user):
    """Check if user is valid."""
    return user.is_active and user.email_verified

if is_valid_user(user):
    process_user(user)

# Bad examples
def is_invalid_user(user):
    """Check if user is invalid."""
    return not user.is_active or not user.email_verified

if not is_invalid_user(user):
    process_user(user)
```

6. **DRY Principle (Don't Repeat Yourself)**
   - Eliminate code duplication
   - Extract common functionality into reusable functions or classes
   - Replace magic numbers with named constants

```python
# Good examples
def format_currency(amount):
    """Format amount as currency."""
    return f"${amount:,.2f}"

def display_order(order):
    """Display order details."""
    print(f"Order ID: {order.id}")
    print(f"Total: {format_currency(order.total)}")

def display_invoice(invoice):
    """Display invoice details."""
    print(f"Invoice ID: {invoice.id}")
    print(f"Amount: {format_currency(invoice.amount)}")

# Bad examples
def display_order(order):
    """Display order details."""
    print(f"Order ID: {order.id}")
    print(f"Total: ${order.total:,.2f}")  # Duplicated formatting

def display_invoice(invoice):
    """Display invoice details."""
    print(f"Invoice ID: {invoice.id}")
    print(f"Amount: ${invoice.amount:,.2f}")  # Duplicated formatting
```

7. **KISS Principle (Keep It Simple, Stupid)**
   - Prefer simple solutions over complex ones
   - Break complex problems into smaller, manageable pieces
   - Complicated code is a sign that you don't understand your program well enough

```python
# Good examples
def calculate_tax(amount, tax_rate):
    """Calculate tax for given amount and rate."""
    return amount * tax_rate

def process_order(order):
    """Process a simple order."""
    subtotal = sum(item.price for item in order.items)
    tax = calculate_tax(subtotal, order.tax_rate)
    return subtotal + tax

# Bad examples
def process_complex_order(order):
    """Process order with unnecessary complexity."""
    return (sum(item.price * (1 + (order.tax_rate if not item.is_tax_exempt else 0))
               for item in order.items if not item.is_deleted)
            * (1 - order.discount if order.has_discount else 1)
            + order.shipping_cost if order.needs_shipping else 0)
```

8. **SOLID Principles**

```python
# Single Responsibility Principle
class User:
    """Handles user data only."""
    def __init__(self, name, email):
        self.name = name
        self.email = email

class UserValidator:
    """Handles user validation only."""
    def validate_email(self, email):
        return "@" in email

# Open-Closed Principle
class PaymentProcessor:
    """Base class for payment processing."""
    def process_payment(self, amount):
        raise NotImplementedError

class CreditCardProcessor(PaymentProcessor):
    def process_payment(self, amount):
        # Process credit card payment
        pass

class PayPalProcessor(PaymentProcessor):
    def process_payment(self, amount):
        # Process PayPal payment
        pass

# Liskov Substitution Principle
class Bird:
    def fly(self):
        pass

class Sparrow(Bird):
    def fly(self):
        # Sparrow can fly
        pass

# Interface Segregation Principle
class Printer:
    def print(self):
        pass

class Scanner:
    def scan(self):
        pass

class Photocopier(Printer, Scanner):
    def print(self):
        # Implement printing
        pass
    
    def scan(self):
        # Implement scanning
        pass

# Dependency Inversion Principle
class Database:
    def save(self, data):
        pass

class UserRepository:
    def __init__(self, database):
        self.database = database
    
    def save_user(self, user):
        self.database.save(user)
```

### 3. Error Handling Principles

1. **Error Handling is One Thing**
   - Functions should handle errors separately from their main logic
   - Error handling should be clear and focused
   - Use error handling code for conditions you expect to occur
   - Use assertions for conditions that should never occur

```python
# Good examples
def process_order(order):
    """Process an order with proper error handling."""
    try:
        validate_order(order)
        return calculate_total(order)
    except ValidationError as e:
        log_error(f"Order validation failed: {e}")
        raise OrderProcessingError("Failed to process order") from e

def validate_order(order):
    """Validate order details."""
    if not order.items:
        raise ValidationError("Order must contain items")
    if not order.customer:
        raise ValidationError("Order must have a customer")

# Bad examples
def process_order(order):
    """Process an order with mixed error handling."""
    if not order.items:  # Mixing validation with processing
        log_error("Order has no items")
        return None
    try:
        total = sum(item.price for item in order.items)
        if total < 0:  # Mixing validation with processing
            log_error("Total is negative")
            return None
        return total
    except Exception as e:  # Too broad exception handling
        log_error(str(e))
        return None
```

2. **Define Normal Flow in the Error**
   - Make the normal flow clear and handle errors explicitly
   - Use custom exceptions to represent different error cases
   - Correctness means never returning an inaccurate result
   - Robustness means always trying to do something that allows the program to keep running

```python
# Good examples
class OrderError(Exception):
    """Base exception for order-related errors."""
    pass

class InsufficientStockError(OrderError):
    """Raised when there isn't enough stock to fulfill an order."""
    pass

class PaymentError(OrderError):
    """Raised when payment processing fails."""
    pass

def process_order(order):
    """Process an order with clear error flow."""
    try:
        check_stock(order)
        process_payment(order)
        fulfill_order(order)
    except InsufficientStockError:
        notify_customer_of_stock_issue(order)
        raise
    except PaymentError:
        notify_customer_of_payment_issue(order)
        raise
    except OrderError:
        # Handle other order-related errors
        raise
    except Exception:
        # Handle unexpected errors
        log_unexpected_error()
        raise OrderError("Unexpected error occurred")

# Bad examples
def process_order(order):
    """Process an order with unclear error flow."""
    try:
        # Mixed error handling and business logic
        if not check_stock(order):
            return False
        if not process_payment(order):
            return False
        if not fulfill_order(order):
            return False
        return True
    except Exception:  # Unclear what exceptions might occur
        return False
```

3. **Don't Return Null in an Error**
   - Use exceptions instead of returning None or null values
   - Make error conditions explicit
   - Convert data to the proper type ASAP

```python
# Good examples
def find_user_by_id(user_id):
    """Find a user by their ID."""
    user = db.query("SELECT * FROM users WHERE id = ?", user_id)
    if not user:
        raise UserNotFoundError(f"User with ID {user_id} not found")
    return user

def get_user_email(user_id):
    """Get a user's email address."""
    try:
        user = find_user_by_id(user_id)
        return user.email
    except UserNotFoundError:
        raise  # Re-raise the specific exception

# Bad examples
def find_user_by_id(user_id):
    """Find a user by their ID."""
    user = db.query("SELECT * FROM users WHERE id = ?", user_id)
    return user  # Returns None if user not found

def get_user_email(user_id):
    """Get a user's email address."""
    user = find_user_by_id(user_id)
    if user is None:  # Checking for None
        return None
    return user.email
```

4. **Do Not Null Pass (or Except-Pass)**
   - Never use empty except blocks
   - Always handle exceptions explicitly
   - Log unexpected exceptions
   - Exceptions weaken encapsulation by requiring the caller to know which exceptions might be thrown

```python
# Good examples
def process_data(data):
    """Process data with proper exception handling."""
    try:
        result = transform_data(data)
        return result
    except ValueError as e:
        log_error(f"Invalid data format: {e}")
        raise DataProcessingError("Failed to process data") from e
    except Exception as e:
        log_error(f"Unexpected error: {e}")
        raise DataProcessingError("Unexpected error occurred") from e

def safe_division(a, b):
    """Perform division with proper error handling."""
    try:
        return a / b
    except ZeroDivisionError:
        raise ValueError("Cannot divide by zero")
    except TypeError:
        raise ValueError("Both arguments must be numbers")

# Bad examples
def process_data(data):
    """Process data with improper exception handling."""
    try:
        result = transform_data(data)
        return result
    except:  # Bare except clause
        pass  # Silent failure

def safe_division(a, b):
    """Perform division with improper error handling."""
    try:
        return a / b
    except:  # Catching all exceptions
        return None  # Silent failure with None return
```

5. **Exception Handling**
   - Never pass exceptions silently in try-except blocks
   - Always log errors when they are caught, even if they are expected
   - Use specific exception types rather than catching all exceptions
   - Include context in error messages and logs

```python
# Good examples
def process_data(data):
    """Process data with proper error handling."""
    try:
        result = complex_operation(data)
        return result
    except ValueError as e:
        logger.error(f"Invalid data format: {str(e)}")
        raise  # Re-raise after logging
    except ConnectionError as e:
        logger.error(f"Failed to connect to service: {str(e)}")
        raise  # Re-raise after logging

def safe_operation():
    """Perform operation with expected errors."""
    try:
        result = risky_operation()
        return result
    except ExpectedError as e:
        logger.warning(f"Expected error occurred: {str(e)}")
        return None  # Return default value after logging

# Bad examples
def process_data(data):
    """Process data with improper error handling."""
    try:
        result = complex_operation(data)
        return result
    except:  # Catching all exceptions silently
        return None

def safe_operation():
    """Perform operation with silent error handling."""
    try:
        result = risky_operation()
        return result
    except Exception:  # Catching and passing silently
        pass
```

### 4. Code Organization and Layout

1. **Layout Fundamentals**
   - Good visual layout shows the logical structure of a program
   - Use blank lines to identify paragraphs of code that accomplish a single task
   - Use more parentheses than you think you need
   - Break up multi-line statements so the first line is blatantly incorrect syntactically if it stood alone

2. **Control Structures**
   - Use blank lines to open up natural spaces for comments
   - For complicated conditional expressions, put each group of related expressions on its own line
   - Keep related elements together when breaking lines
   - Use one statement per line for unambiguous top-to-bottom reading

3. **Comments and Documentation**
   - Good comments don't repeat the code but clarify its intent
   - Comments should explain the "why" not the "what"
   - Document surprises, such as optimizations and workarounds
   - Include authorship information in top-level comments
   - Write comments before the code, not after

4. **Variable Scope and Initialization**
   - Declare and define variables close to where they're used
   - Begin with the most restricted visibility and expand only if necessary
   - Initialize named constants once
   - Use variables for only one purpose
   - Avoid having different values for a variable mean different things

### 5. Code Formatting

1. **Vertical Formatting**
   - Keep files small and focused (maximum 500 lines)
   - Organize code in a top-down manner
   - Use blank lines to separate concepts
   - Keep related code vertically dense

```python
# Good examples
class UserService:
    """Service for user-related operations."""
    
    def __init__(self, db):
        self.db = db
    
    def create_user(self, user_data):
        """Create a new user."""
        validate_user_data(user_data)
        user = User(**user_data)
        return self.save_user(user)
    
    def save_user(self, user):
        """Save user to database."""
        return self.db.save(user)

def validate_user_data(user_data):
    """Validate user data before creation."""
    if not user_data.get('email'):
        raise ValueError("Email is required")
    if not user_data.get('password'):
        raise ValueError("Password is required")

# Bad examples
class UserService:
    def __init__(self, db):
        self.db = db
    
    def create_user(self, user_data):
        if not user_data.get('email'):
            raise ValueError("Email is required")
        if not user_data.get('password'):
            raise ValueError("Password is required")
        user = User(**user_data)
        return self.db.save(user)  # Mixed levels of abstraction
```

2. **Vertical Ordering**
   - Place called functions below calling functions
   - Organize code from high-level to low-level
   - Keep related functions close together

```python
# Good examples
def process_order(order):
    """High-level order processing."""
    validate_order(order)
    calculate_total(order)
    apply_discounts(order)
    save_order(order)

def validate_order(order):
    """Validate order details."""
    if not order.items:
        raise ValueError("Order must contain items")

def calculate_total(order):
    """Calculate order total."""
    order.total = sum(item.price for item in order.items)

# Bad examples
def calculate_total(order):
    order.total = sum(item.price for item in order.items)

def process_order(order):  # High-level function should be first
    validate_order(order)
    calculate_total(order)
    apply_discounts(order)
    save_order(order)

def validate_order(order):
    if not order.items:
        raise ValueError("Order must contain items")
```

3. **Vertical Distance**
   - Declare variables close to their usage
   - Place instance variables at the top of the class
   - Keep related code together

```python
# Good examples
class OrderProcessor:
    """Process customer orders."""
    
    def __init__(self, db):
        self.db = db
        self.tax_rate = 0.08
    
    def process_order(self, order):
        """Process a single order."""
        # Variables declared close to usage
        subtotal = sum(item.price for item in order.items)
        tax = subtotal * self.tax_rate
        total = subtotal + tax
        
        order.total = total
        return self.save_order(order)

# Bad examples
class OrderProcessor:
    def __init__(self, db):
        self.db = db
        self.tax_rate = 0.08
        self.subtotal = 0  # Declared too early
        self.tax = 0
        self.total = 0
    
    def process_order(self, order):
        self.subtotal = sum(item.price for item in order.items)
        self.tax = self.subtotal * self.tax_rate
        self.total = self.subtotal + self.tax
        order.total = self.total
        return self.save_order(order)
```

4. **Horizontal Formatting**
   - Limit line length to 79 characters (PEP 8)
   - Use horizontal whitespace to show relationships
   - Follow consistent indentation (4 spaces)

```python
# Good examples
def calculate_discount(order, customer_type):
    """Calculate discount based on customer type."""
    discount_rates = {
        'regular': 0.05,
        'premium': 0.10,
        'vip': 0.15
    }
    
    if customer_type not in discount_rates:
        raise ValueError(f"Invalid customer type: {customer_type}")
    
    return order.total * discount_rates[customer_type]

# Bad examples
def calculate_discount(order,customer_type):  # Missing space after comma
    discount_rates={'regular':0.05,'premium':0.10,'vip':0.15}  # No spaces
    if customer_type not in discount_rates:raise ValueError(f"Invalid customer type: {customer_type}")  # Line too long
    return order.total*discount_rates[customer_type]  # Missing spaces around operator
```

5. **Horizontal Openness and Density**
   - Use spaces around operators
   - No space between function name and parenthesis
   - Use consistent spacing in lists and dictionaries

```python
# Good examples
def format_user_info(user):
    """Format user information for display."""
    return {
        'name': user.name,
        'email': user.email,
        'joined': user.join_date.strftime('%Y-%m-%d')
    }

result = calculate_total(items)  # No space before parenthesis
total = price * quantity  # Spaces around operator

# Bad examples
def format_user_info( user ):  # Extra spaces in parentheses
    return {'name':user.name,'email':user.email,'joined':user.join_date.strftime('%Y-%m-%d')}  # No spaces in dict
result = calculate_total (items)  # Space before parenthesis
total=price*quantity  # No spaces around operators
```

6. **Indentation**
   - Use 4 spaces for indentation (PEP 8)
   - Be consistent with indentation levels
   - Use indentation to show code hierarchy

```python
# Good examples
def process_data(data):
    """Process and validate data."""
    try:
        if not data:
            raise ValueError("No data provided")
        
        result = []
        for item in data:
            if is_valid(item):
                processed = transform(item)
                result.append(processed)
        
        return result
    except Exception as e:
        log_error(f"Failed to process data: {e}")
        raise

# Bad examples
def process_data(data):
    try:
    if not data:  # Wrong indentation
        raise ValueError("No data provided")
    
    result = []
    for item in data:
    if is_valid(item):  # Wrong indentation
        processed = transform(item)
        result.append(processed)
    
    return result
    except Exception as e:
        log_error(f"Failed to process data: {e}")
        raise
```

### 6. Comments and Documentation

1. **Comment Philosophy**
   - **Comments are essential**: Comments are not optional; they are a crucial part of software design
   - **Document design decisions**: Use comments to explain why design choices were made, not just what the code does
   - **Reduce cognitive load**: Comments help developers understand code without having to rederive knowledge
   - **Interface documentation**: Comments are part of the interface specification
   - **Keep comments up-to-date**: Comments must be maintained along with code

```python
# Good examples - Comments that document design decisions
def calculate_tax(amount, is_exempt=False):
    """Calculate tax for a given amount.
    
    This function implements the tax calculation logic based on current
    state regulations. The tax rate is composed of a base state rate
    plus local surcharges that vary by jurisdiction.
    
    Args:
        amount (float): The amount to calculate tax for
        is_exempt (bool): Whether the amount is tax exempt
        
    Returns:
        float: The calculated tax amount
        
    Note:
        Tax rates are updated quarterly. This function uses the rates
        effective as of 2024-01-01. See tax_rates.py for current rates.
    """
    if is_exempt:
        return 0.0
    
    # Tax calculation follows state regulations updated 2023-01-01
    # Base rate: 6.5%, plus 0.5% local surcharge
    # These rates are hardcoded here for performance, but should be
    # updated when new rates are published
    tax_rate = 0.065 + 0.005
    return amount * tax_rate

# Bad examples - Missing essential documentation
def calc_tax(amt, ex=False):  # Bad: Unclear variable names
    if ex:  # Bad: Unclear condition
        return 0.0
    return amt * 0.07  # Bad: Magic number without explanation
```

2. **Essential Comments**
   - **Interface documentation**: Document what each function does, its parameters, and return values
   - **Design rationale**: Explain why design decisions were made
   - **Complexity explanations**: Document complex algorithms and business rules
   - **Assumptions and constraints**: Document what the code assumes and what it cannot handle
   - **Performance considerations**: Document performance characteristics and trade-offs

```python
# Good examples - Comprehensive documentation
# Copyright (c) 2024 Company Name. All rights reserved.
# Licensed under the MIT License.

def process_sensitive_data(data):
    """Process sensitive user data with encryption and validation.
    
    This function handles PII (Personally Identifiable Information) and
    must be used with appropriate security measures. The function
    validates data format, encrypts sensitive fields, and logs access
    for audit purposes.
    
    WARNING: This function handles PII (Personally Identifiable Information).
    Ensure proper encryption and access controls are in place.
    
    Args:
        data (dict): User data containing potentially sensitive information
        
    Returns:
        dict: Processed and encrypted user data
        
    Raises:
        SecurityError: If data is not properly encrypted
        ValidationError: If data format is invalid
        
    Note:
        This function is part of the data processing pipeline and must
        be called within a secure context. See security.md for details.
    """
    if not is_encrypted(data):
        raise SecurityError("Data must be encrypted")
    
    # TODO: Implement rate limiting for bulk processing
    # Current implementation may timeout with large datasets
    # See issue #1234 for performance optimization plan
    
    # Using list comprehension instead of map() for better readability
    # and to maintain consistent error handling. The map() function
    # would require additional error handling that would make the code
    # more complex without significant performance benefit.
    return [transform(item) for item in data]

# Bad examples - Insufficient documentation
def process_data(data):
    # Process data  # Bad: Redundant comment
    return [x * 2 for x in data]  # Bad: Obvious operation
```

3. **Implementation Comments**
   - **Algorithm explanations**: Document complex algorithms and their rationale
   - **Business rule documentation**: Explain business logic that might not be obvious
   - **Performance optimizations**: Document why certain optimizations were chosen
   - **Workarounds and limitations**: Document known issues and their workarounds
   - **Future considerations**: Document what might need to change in the future

```python
# Good examples - Implementation documentation
def calculate_discount(order):
    """Calculate order discount based on customer loyalty and order value.
    
    This function implements the company's discount policy which combines
    customer loyalty points with order value to determine discount percentage.
    The policy is designed to reward both frequent customers and large orders.
    
    Business Rules:
    - Base discount: 5% for orders over $100
    - Loyalty bonus: 1% per 100 loyalty points (max 10%)
    - Maximum total discount: 15%
    - New customers (0 points) get no loyalty bonus
    """
    # Calculate base discount from order value
    # This encourages larger orders and provides immediate value
    base_discount = 0.05 if order.total > 100 else 0.0
    
    # Calculate loyalty bonus
    # This rewards customer retention and encourages repeat business
    loyalty_bonus = min(order.customer.loyalty_points / 1000, 0.10)
    
    # Apply maximum discount cap
    # This prevents excessive discounts that could hurt profitability
    total_discount = min(base_discount + loyalty_bonus, 0.15)
    
    return order.total * total_discount

# Bad examples - Missing business logic documentation
def calculate_discount(order):
    if order.customer.loyalty_points > 1000:  # Check points  # Bad: Obvious
        return order.total * 0.1  # 10% discount  # Bad: Redundant
    return 0.0  # No discount  # Bad: Redundant
```

4. **Documentation Standards**
   - Use docstrings for modules, classes, and functions
   - Follow Google style docstrings
   - Include type hints
   - Document exceptions
   - Keep documentation up-to-date

```python
# Good examples
class PaymentProcessor:
    """Handles payment processing for orders.
    
    This class implements secure payment processing with support for
    multiple payment methods and error handling.
    
    Attributes:
        api_key (str): Payment gateway API key
        test_mode (bool): Whether to use test environment
    """
    
    def __init__(self, api_key: str, test_mode: bool = False):
        """Initialize payment processor.
        
        Args:
            api_key: Payment gateway API key
            test_mode: Whether to use test environment
            
        Raises:
            ConfigurationError: If API key is invalid
        """
        self.api_key = api_key
        self.test_mode = test_mode
        self._validate_config()

# Bad examples
class PaymentProcessor:
    # Payment processor class  # Bad: Use docstring instead
    def __init__(self, key, test=False):
        # Initialize processor  # Bad: Redundant
        self.key = key  # API key  # Bad: Use docstring
        self.test = test
```

5. **Comment Maintenance**
   - Review comments during code reviews
   - Update comments when code changes
   - Remove outdated comments
   - Use version control for history
   - Keep comments concise and relevant

```python
# Good examples
def validate_user_input(data: dict) -> bool:
    """Validate user registration data.
    
    Args:
        data: User registration data
        
    Returns:
        bool: True if data is valid
        
    Note:
        Password requirements updated 2024-01-15:
        - Minimum 12 characters
        - Must include special characters
    """
    if len(data.get('password', '')) < 12:
        return False
    if not any(c in '!@#$%^&*' for c in data.get('password', '')):
        return False
    return True

# Bad examples
def validate_input(data):
    # Validate user input  # Bad: Redundant comment
    # TODO: Update password requirements  # Bad: Outdated TODO
    # Minimum 8 characters  # Bad: Outdated requirement
    if len(data.get('password', '')) < 8:  # Bad: Outdated validation
        return False
    return True
```

## Real-World Examples

* @Example User Model
* @Example Service Class

## Common Pitfalls

### Complexity Management
* **Premature decomposition**: Breaking up functions just to make them shorter without reducing complexity
* **Shallow modules**: Creating modules with complex interfaces that expose implementation details
* **Information leakage**: Exposing internal implementation details through public interfaces
* **Over-abstraction**: Creating abstractions that don't actually hide complexity

### Documentation
* **Missing design documentation**: Not explaining why design decisions were made
* **Redundant comments**: Comments that just repeat what the code obviously does
* **Outdated documentation**: Comments that don't match the current implementation
* **Missing interface documentation**: Not documenting what functions do and what they expect

### Design Issues
* **Special-purpose solutions**: Creating code that can only be used for one specific case
* **Tight coupling**: Creating dependencies that make modules hard to modify independently
* **Complex interfaces**: Making interfaces that require too much knowledge to use correctly
* **Inconsistent patterns**: Using different approaches for similar problems

### Technical Issues
* Using unclear or abbreviated variable names
* Missing type hints in function signatures
* Inconsistent indentation (should be 4 spaces)
* Not following PEP 8 line length limits (79 characters for code, 72 for docstrings)
* Mixing different string quote styles (use single quotes for strings, double quotes for docstrings)
* Not using context managers for file operations
* Not handling exceptions appropriately
* Not using list comprehensions or generator expressions when appropriate
* Creating god classes that do too much
* Using global variables when local variables would suffice
* Writing code that's clever rather than clear
* Not testing error conditions
* Not considering performance implications of data structures and algorithms

### 5. Testing Philosophy

1. **Test-Driven Development Considerations**
   - **Focus on design first**: Design interfaces before writing tests
   - **Avoid premature testing**: Don't write tests before understanding the problem
   - **Test the interface, not implementation**: Tests should verify behavior, not internal details
   - **Bundle testing with implementation**: Write tests after implementing functionality, not before

```python
# Good examples - Testing after design
class OrderProcessor:
    """Process customer orders with comprehensive business logic."""
    
    def process_order(self, order):
        """Process a complete order workflow."""
        # Implementation focuses on design and complexity management
        if not order.is_valid():
            raise InvalidOrderError("Order validation failed")
        
        # Complex business logic hidden behind simple interface
        self._apply_pricing_rules(order)
        self._handle_payment(order)
        self._update_inventory(order)
        
        return order

# Tests written after implementation, focusing on behavior
def test_process_order_success():
    """Test successful order processing."""
    processor = OrderProcessor()
    order = create_valid_order()
    
    result = processor.process_order(order)
    
    assert result.status == 'processed'
    assert result.total > 0

def test_process_order_invalid():
    """Test order processing with invalid order."""
    processor = OrderProcessor()
    order = create_invalid_order()
    
    with pytest.raises(InvalidOrderError):
        processor.process_order(order)

# Bad examples - Testing before design understanding
def test_calculate_subtotal():
    """Test subtotal calculation."""
    # Tests written before understanding the full problem
    # May lead to over-decomposition and shallow modules
    pass

def test_apply_discount():
    """Test discount application."""
    # Individual tests for each small function
    # May not reflect the actual complexity of the system
    pass
```

2. **Testing Strategy**
   - **Integration tests over unit tests**: Focus on testing complete workflows
   - **Test behavior, not structure**: Verify that the system works correctly
   - **Minimize test maintenance**: Tests should be stable and not break with implementation changes
   - **Document test intent**: Explain what each test is verifying and why

### 6. Objects and Data Structures

1. **Object-Oriented Design**
   - Classes should expose abstract interfaces, not just data
   - Hide implementation details behind meaningful abstractions
   - Focus on behavior rather than data access

```python
# Good examples
class BankAccount:
    """Represents a bank account with abstract operations."""
    def __init__(self, balance=0):
        self._balance = balance
    
    def deposit(self, amount):
        """Deposit money into the account."""
        if amount <= 0:
            raise ValueError("Amount must be positive")
        self._balance += amount
    
    def withdraw(self, amount):
        """Withdraw money from the account."""
        if amount <= 0:
            raise ValueError("Amount must be positive")
        if amount > self._balance:
            raise ValueError("Insufficient funds")
        self._balance -= amount
    
    def get_balance(self):
        """Get the current balance."""
        return self._balance

# Bad examples
class BankAccount:
    """Exposes internal data structure."""
    def __init__(self, balance=0):
        self.balance = balance  # Public attribute
    
    def set_balance(self, balance):
        self.balance = balance
    
    def get_balance(self):
        return self.balance
```

2. **Objects vs Data Structures**
   - Objects hide data behind abstractions
   - Data structures expose data directly
   - Avoid hybrid structures

```python
# Good examples
# Object (behavior-focused)
class TemperatureSensor:
    """Represents a temperature sensor with behavior."""
    def __init__(self):
        self._temperature = 0
    
    def read_temperature(self):
        """Read current temperature."""
        return self._temperature
    
    def calibrate(self):
        """Calibrate the sensor."""
        self._temperature = self._read_raw_value() * 0.95

# Data Structure (data-focused)
class TemperatureData:
    """Simple data structure for temperature readings."""
    def __init__(self, value, timestamp, unit):
        self.value = value
        self.timestamp = timestamp
        self.unit = unit

# Bad examples (Hybrid)
class Temperature:
    """Mixes behavior and data exposure."""
    def __init__(self):
        self.value = 0  # Public data
        self.unit = "C"
    
    def read(self):  # Behavior
        return self.value
    
    def calibrate(self):  # Behavior
        self.value *= 0.95
```

3. **Law of Demeter**
   - Objects should not expose internal structure
   - Avoid chaining method calls that reveal implementation details
   - Keep modules independent of object internals

```python
# Good examples
class OrderProcessor:
    """Processes orders without violating Law of Demeter."""
    def __init__(self, order):
        self.order = order
    
    def process(self):
        """Process the order."""
        if self.order.is_valid():
            self._process_valid_order()
    
    def _process_valid_order(self):
        """Process a valid order."""
        customer = self.order.get_customer()
        customer.notify_order_processed(self.order)

# Bad examples
class OrderProcessor:
    """Violates Law of Demeter with method chaining."""
    def process(self, order):
        # Train wreck: accessing internals through chained calls
        order.customer.email.send_notification(
            f"Order {order.id} processed with total {order.items.total}"
        )
```

4. **Data Transfer Objects (DTOs)**
   - Simple classes with public data
   - No behavior, just data transfer
   - Useful for database communication and API responses

```python
# Good examples
class UserDTO:
    """Data Transfer Object for user information."""
    def __init__(self, id, name, email):
        self.id = id
        self.name = name
        self.email = email

class OrderDTO:
    """Data Transfer Object for order information."""
    def __init__(self, id, items, total):
        self.id = id
        self.items = items
        self.total = total

# Bad examples
class UserDTO:
    """Mixes DTO with behavior."""
    def __init__(self, id, name, email):
        self.id = id
        self.name = name
        self.email = email
    
    def validate(self):  # Should not have behavior
        return "@" in self.email
```

5. **Active Record Pattern**
   - Special form of DTO with basic persistence methods
   - Direct mapping to database tables
   - Limited behavior focused on persistence

```python
# Good examples
class UserRecord:
    """Active Record for user data."""
    def __init__(self, id, name, email):
        self.id = id
        self.name = name
        self.email = email
    
    def save(self):
        """Save the record to the database."""
        db.execute(
            "INSERT INTO users (id, name, email) VALUES (?, ?, ?)",
            (self.id, self.name, self.email)
        )
    
    @classmethod
    def find(cls, user_id):
        """Find a user by ID."""
        result = db.query("SELECT * FROM users WHERE id = ?", user_id)
        if result:
            return cls(**result)
        return None

# Bad examples
class UserRecord:
    """Mixes Active Record with business logic."""
    def __init__(self, id, name, email):
        self.id = id
        self.name = name
        self.email = email
    
    def save(self):
        db.execute(
            "INSERT INTO users (id, name, email) VALUES (?, ?, ?)",
            (self.id, self.name, self.email)
        )
    
    def send_welcome_email(self):  # Should not be in Active Record
        email.send(self.email, "Welcome!", "Welcome to our service!")
```
